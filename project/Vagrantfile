# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Vagrant by default saves VM info in a .vagrant/ folder next to where Vagrantfile lives.
# You can however start vagrant from a subfolder, in which case VM info from different VMs
# could get mixed up. Make sure to put .vagrant/ in CWD rather than next to Vagrantfile
# if there is no Vagrantfile in CWD.
VAGRANTFILE = ENV["VAGRANT_VAGRANTFILE"] || "Vagrantfile"
VAGRANTFILE_PATH = Dir.getwd + "/" + VAGRANTFILE

@command = ARGV[0]

if @command != "global-status" && # skip this for global-status
  !(File.exists? VAGRANTFILE_PATH) && # Vagrantfile must be in a higher dir
    ENV["VAGRANT_DOTFILE_PATH"].nil? # and .vagrant location is not set explicitly
  
  VAGRANT_DOTFILE_PATH = Dir.getwd + "/.vagrant"
  puts "Setting VAGRANT_DOTFILE_PATH to " + VAGRANT_DOTFILE_PATH
  puts ""

  ENV["VAGRANT_DOTFILE_PATH"] = VAGRANT_DOTFILE_PATH
  system "vagrant " + ARGV.join(" ")
  ENV["VAGRANT_DOTFILE_PATH"] = nil # for good measure

  abort "Finished"
end

def load_properties(properties_filename, prefix = "")
  properties = {}

  if File.exists? properties_filename
    File.open(properties_filename, "r") do |properties_file|
      properties_file.read.each_line do |line|
        line.strip!
        if (line[0] != ?#) && (line[0] != ?=) && (line[0] != "")
          i = line.index("=")
          if i
            key = prefix + line[0..i - 1].strip.upcase
            value = line[i + 1..-1].strip
            value.gsub!(/^"(.*)"$/, '\1')
            properties[key] = value
          end
        end
      end
    end
  else
    puts "WARN: Properties file #{properties_filename} not found.." unless @command == "global-status"
  end

  properties
end

def get_vm_name(i)
  name = "#{@vm_name}"
  name.gsub!(/\{project_name\}/, @project_name)
  name.gsub!(/\{vm_version\}/, @vm_version)
  name.gsub!(/\{ml_version\}/, @ml_version)
  name.gsub!(/\{i\}/, i.to_s)
  name
end

def inc_ip(ip, i)
  newip = "#{ip}"
  nr = "#{ip}"
  nr.gsub!(/^(.*\.)+/, "")
  newip.gsub!(/\.\d+$/, ".#{nr.to_i + i}")
  newip
end

@properties = load_properties("project.properties")
@project_name = ENV["MLV_PROJECT_NAME"] || @properties["PROJECT_NAME"] || File.basename(Dir.getwd)

@vm_name = ENV["MLV_VM_NAME"] || @properties["VM_NAME"] || "{project_name}-ml{i}"
@vm_version = ENV["MLV_VM_VERSION"] || @properties["VM_VERSION"] || "7.2"
@ml_version = ENV["MLV_ML_VERSION"] || @properties["ML_VERSION"] || "9"
@nr_hosts = (ENV["MLV_NR_HOSTS"] || @properties["NR_HOSTS"] || "3").to_i
@master_memory = (ENV["MLV_MASTER_MEMORY"] || @properties["MASTER_MEMORY"] || "2048").to_i
@master_cpus = (ENV["MLV_MASTER_CPUS"] || @properties["MASTER_CPUS"] || "2").to_i
@slave_memory = (ENV["MLV_SLAVE_MEMORY"] || @properties["SLAVE_MEMORY"] || @master_memory.to_s).to_i
@slave_cpus = (ENV["MLV_SLAVE_CPUS"] || @properties["SLAVE_CPUS"] || @master_cpus.to_s).to_i
@ml_installer = ENV["MLV_ML_INSTALLER"] || @properties["ML_INSTALLER"] || ""
@mlcp_installer = ENV["MLV_MLCP_INSTALLER"] || @properties["MLCP_INSTALLER"] || ""
@public_network = ENV["MLV_PUBLIC_NETWORK"] || @properties["PUBLIC_NETWORK"] || ""
@priv_net_ip = ENV["MLV_PRIV_NET_IP"] || @properties["PRIV_NET_IP"] || ""
@shared_folder_host = ENV["MLV_SHARED_FOLDER_HOST"] || @properties["SHARED_FOLDER_HOST"] || ""
@shared_folder_guest = ENV["MLV_SHARED_FOLDER_GUEST"] || @properties["SHARED_FOLDER_GUEST"] || ""
@net_proxy = ENV["MLV_NET_PROXY"] || @properties["NET_PROXY"] || ""
@no_proxy = ENV["MLV_NO_PROXY"] || @properties["NO_PROXY"] || "localhost,127.0.0.1"

unless @net_proxy.empty? or Vagrant.has_plugin?("vagrant-proxyconf")
  abort 'To use net_proxy setting, run "vagrant plugin install vagrant-proxyconf" first.'
end

@vm_name = get_vm_name("{i}")

puts "Loading project #{@project_name}.." unless @command == "global-status"
if @command == "status" or @command == "up" or @command == "provision"
  puts ""
  puts "vm_name=#{@vm_name}"
  puts "vm_version=#{@vm_version}"
  puts "ml_version=#{@ml_version}"
  puts "nr_hosts=#{@nr_hosts}"
  puts "master_memory=#{@master_memory}"
  puts "master_cpus=#{@master_cpus}"
  if @nr_hosts > 1
    puts "slave_memory=#{@slave_memory}"
    puts "slave_cpus=#{@slave_cpus}"
  end
  if @ml_installer != ""
    puts "ml_installer=#{@ml_installer}"
  end
  if @mlcp_installer != ""
    puts "mlcp_installer=#{@mlcp_installer}"
  end
  if @shared_folder_host != "" and  @shared_folder_guest != ""
    puts "shared_folder_host=#{@shared_folder_host}"
    puts "shared_folder_guest=#{@shared_folder_guest}"
  end
  if @public_network != ""
    puts ""
    puts "WARN: Using DHCP on Public Network '#{@public_network}'!"
  elsif @priv_net_ip != ""
    puts "priv_net_ip=#{@priv_net_ip}"
  else
    puts ""
    puts "Using DHCP for Private Network"
  end
  puts ""
  
  if @command == "up" and @vm_version == "5.11" and @ml_version == "8"
    puts "MarkLogic 8 NOT supported on CentOS 5! Try MarkLogic 7, or CentOS 6.."
    abort "Bailing out.."
  end
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    mastername = get_vm_name(1)

    unless @net_proxy.empty?
      hostnames = (1..@nr_hosts).map{|i| get_vm_name(i)}.join(",")
      config.proxy.ftp = @net_proxy
      config.proxy.http = @net_proxy
      config.proxy.https = @net_proxy
      config.proxy.no_proxy = "#{@no_proxy},#{hostnames}"
    end

    if Vagrant.has_plugin?("vagrant-vbguest")
        config.vbguest.no_install = true
    end


    # Customize the virtual machine environments
    config.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
        vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
        # to make sure ssh won't timeout because of a regression in VBox
        vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
        vb.customize ["modifyvm", :id, "--cableconnected2", "on"]
        #vb.gui = true # for debugging
    end

    config.vm.define mastername do |master|
        master.vm.box = "grtjn/centos-#{@vm_version}"
        master.vm.provider "virtualbox" do |v|
            v.name = mastername
            v.memory = @master_memory
            v.cpus = @master_cpus
        end
        master.vm.hostname = mastername
        if @public_network != ""
          master.vm.network "public_network", bridge: @public_network
        elsif @priv_net_ip != ""
          master.vm.network "private_network", ip: @priv_net_ip
        else
          master.vm.network "private_network", type: "dhcp"
        end
        master.vm.synced_folder Dir.getwd, "/vagrant"
        master.vm.synced_folder "/opt/vagrant", "/opt/vagrant"
        master.vm.synced_folder "/space/software", "/space/software"
        if @shared_folder_host != "" and  @shared_folder_guest != ""
          master.vm.synced_folder @shared_folder_host, @shared_folder_guest, :create => true
        end
        master.vm.provision :shell, :path => "../opt/vagrant/bootstrap-centos-master.sh", :args => ["-v", "#{@ml_version}", mastername, File.basename(Dir.getwd)]
    end

    if @nr_hosts > 1
        (2..@nr_hosts).each do |i|
          hostname = get_vm_name(i)
          config.vm.define hostname do |slave|
                slave.vm.box = "grtjn/centos-#{@vm_version}"
                slave.vm.provider "virtualbox" do |v|
                    v.name = hostname
                    v.memory = @slave_memory
                    v.cpus = @slave_cpus
                end
                slave.vm.hostname = hostname
                if @public_network != ""
                  slave.vm.network "public_network", bridge: @public_network
                elsif @priv_net_ip != ""
                  slave.vm.network "private_network", ip: inc_ip(@priv_net_ip, i)
                else
                  slave.vm.network "private_network", type: "dhcp"
                end
                slave.vm.synced_folder Dir.getwd, "/vagrant"
                slave.vm.synced_folder "/opt/vagrant", "/opt/vagrant"
                slave.vm.synced_folder "/space/software", "/space/software"
                if @shared_folder_host != "" and  @shared_folder_guest != ""
                  slave.vm.synced_folder @shared_folder_host, @shared_folder_guest, :create => true
                end
                slave.vm.provision :shell, :path => "/opt/vagrant/bootstrap-centos-extra.sh", :args => ["-v", "#{@ml_version}", mastername, hostname, @project_name]
            end
        end
    end

end
